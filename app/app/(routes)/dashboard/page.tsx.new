"use client";

import { Suspense } from "react";
import { useSearchParams } from "next/navigation";
import { useState } from "react";
import { usePlan } from "@/lib/use-plan";
import { trackEvent } from "@/lib/analytics";
import { runPortfolio } from "@/lib/api";
import { completeChecklistStep } from "@/lib/checklist";
import type { PortfolioRunResponse } from "@/types/api";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { NpsModal } from "@/components/nps-modal";
import { DateRangePicker } from "@/components/date-range-picker";
import { MetricGrid } from "@/components/metric-grid";
import { FileTable } from "@/components/file-table";

function DashboardPageContent() {
  const searchParams = useSearchParams();
  const batchId = searchParams.get("batchId");
  const welcomeName = searchParams.get("welcome");
  const { plan } = usePlan();
  const isFreePlan = plan === "free";
  
  const [capital, setCapital] = useState(100_000);
  const [currency, setCurrency] = useState("USD");
  const [dateRange, setDateRange] = useState<{
    start: Date | null;
    end: Date | null;
  }>({ start: null, end: null });
  const [data, setData] = useState<PortfolioRunResponse | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const fetchData = async () => {
    if (!batchId) return;
    setIsLoading(true);
    setError(null);
    try {
      trackEvent("portfolio_run_requested", { plan });
      const payload = {
        batchId,
        totalCapital: capital,
        currency,
        dateRange: [
          dateRange.start?.toISOString() ?? null,
          dateRange.end?.toISOString() ?? null,
        ] as [string | null, string | null],
      };
      const response = await runPortfolio(payload);
      setData(response);
      completeChecklistStep("run-backtest");
      completeChecklistStep("view-metrics");
      trackEvent("portfolio_run_completed", { plan });
    } catch (err) {
      setError((err as Error).message);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <>
      <NpsModal />
      <div className="px-6 py-10">
        <div className="flex flex-col gap-4 sm:flex-row sm:items-end sm:justify-between">
          <div>
            <h1 className="text-3xl font-bold text-white">Portfolio dashboard</h1>
            <p className="mt-2 max-w-2xl text-slate-300">
              Equal-capital aggregation across tickers with TradingView-style analytics.
            </p>
          </div>
          <div className="flex flex-col items-start gap-3 sm:flex-row sm:items-center">
            <DateRangePicker onChange={setDateRange} />
            <button
              onClick={fetchData}
              disabled={!batchId || isLoading || (isFreePlan && !!data)}
              className="rounded-full bg-brand px-5 py-2 text-sm font-semibold text-white shadow-lg hover:bg-brand-dark disabled:cursor-not-allowed disabled:bg-slate-700"
            >
              {isLoading ? "Running…" : "Run backtest"}
            </button>
          </div>
        </div>

        {error && (
          <div className="mt-4 rounded-lg bg-red-900/50 p-4 text-red-200">
            {error}
          </div>
        )}

        {data && !error && (
          <div className="mt-8">
            <Tabs defaultValue="performance" className="space-y-4">
              <TabsList>
                <TabsTrigger value="performance">Performance</TabsTrigger>
                <TabsTrigger value="trades">Trades analysis</TabsTrigger>
                <TabsTrigger 
                  value="risk" 
                  disabled={isFreePlan}
                  className={isFreePlan ? "opacity-60" : undefined}
                >
                  Risk/performance ratios
                </TabsTrigger>
                <TabsTrigger value="table">List of trades</TabsTrigger>
              </TabsList>

              <TabsContent value="performance">
                <MetricGrid
                  metrics={data.sections.performance.metrics}
                  currency={currency}
                />
              </TabsContent>

              <TabsContent value="trades">
                <MetricGrid
                  metrics={data.sections.tradesAnalysis.metrics}
                  currency={currency}
                />
              </TabsContent>

              <TabsContent value="risk">
                {isFreePlan ? (
                  <div className="tv-card p-6 text-sm text-slate-200">
                    Upgrade to Standard or Pro to unlock correlation, volatility clusters, and tail risk ratios.
                  </div>
                ) : (
                  <MetricGrid 
                    metrics={data.sections.riskRatios.metrics} 
                    currency={currency}
                  />
                )}
              </TabsContent>

              <TabsContent value="table">
                <FileTable trades={data.tradesTable} />
              </TabsContent>
            </Tabs>
          </div>
        )}
      </div>
    </>
  );
}

export default function DashboardPage() {
  return (
    <Suspense fallback={<div className="p-8 text-slate-300">Loading dashboard…</div>}>
      <DashboardPageContent />
    </Suspense>
  );
}